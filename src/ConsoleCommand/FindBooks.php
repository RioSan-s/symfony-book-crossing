<?php

namespace NonEfTech\BookCrossing\ConsoleCommand;

use NonEfTech\BookCrossing\Service\SearchBooksService;
use NonEfTech\BookCrossing\Service\SearchBooksService\BooksDto;
use NonEfTech\BookCrossing\Service\SearchBooksService\SearchBooksCriteria;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class FindBooks extends Command
{
    public function __construct(SearchBooksService $searchBooksService, string $name = null)
    {
        parent::__construct($name);
        $this->searchBooksService = $searchBooksService;
    }

    /**
     *
     *
     * @var SearchBooksService
     */
    private SearchBooksService $searchBooksService;


    protected function configure()
    {
        $this->setName('bookCrossing:find-books');
        $this->setDescription('Search books');
        $this->setHelp('Find books by criteria');
        $this->addOption('author','a',InputOption::VALUE_REQUIRED, 'search book by author');
        $this->addOption('point_id','pi',InputOption::VALUE_REQUIRED, 'search book by id');
        $this->addOption('title','t',InputOption::VALUE_REQUIRED, 'search book by title');
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {

        $params = $input->getOptions();
        $booksDto = $this->searchBooksService->search(
            (new SearchBooksCriteria())
                ->setId($params['id'] ?? null)
                ->setTitle($params['title'] ?? null)
                ->setAuthor($params['author'] ?? null)
                ->setPublishingHouse($params['publishingHouse'] ?? null)
                ->setYearOfPublication($params['yearOfPublication'] ?? null)
                ->setPointId($params['point_id'] ?? null)
                ->setPointPhoneNumber($params['point_phoneNumber'] ?? null)
                ->setPointAddress($params['point_address'] ?? null)
                ->setPointStartTime($params['point_startTime'] ?? null)
                ->setPointEndTime($params['point_endTime'] ?? null)
        );
        $jsonData = $this->buildJsonData($booksDto);
        $output->writeln(json_encode($jsonData, JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        return self::SUCCESS;
    }


    /**
     * Подготовка данных для json
     *
     * @param array $books
     *
     * @return array
     */
    private function buildJsonData(array $books): array
    {
        $result = [];
        foreach ($books as $book) {
            $result[] = $this->serializeBooks($book);
        }
        return $result;
    }

    /**
     * Сериализация книг
     *
     * @noinspection DuplicatedCode
     */
    private function serializeBooks(BooksDto $booksDto): array
    {
        $jsonData = [
            'id'                => $booksDto->getId(),
            'title'             => $booksDto->getTitle(),
            'author'            => $booksDto->getAuthor(),
            'publishingHouse'   => $booksDto->getPublishingHouse(),
            'yearOfPublication' => $booksDto->getYearOfPublication(),
        ];

        $pointsDto = $booksDto->getPoint();
        $jsonData['point'] = [
            'id'          => $pointsDto->getId(),
            'phoneNumber' => $pointsDto->getPhoneNumber(),
            'address'     => $pointsDto->getAddress(),
            'startTime'   => $pointsDto->getStartTime(),
            'endTime'     => $pointsDto->getEndTime(),
        ];

        return $jsonData;
    }


}